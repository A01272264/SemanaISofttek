# -*- coding: utf-8 -*-
"""Martes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RvX5lqWlwvM2RDfjlx0eBi8-9Gd5UT84
"""

import glob
import math
from pathlib import Path
import pandas as pd
import re
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.patches as patches
import numpy as np
import os


def transformCoordinates(coordinates, wmax, hmax):
    datos=coordinates.split()
    a=float(datos[0])
    b=float(datos[1])
    ang=float(datos[2])
    x=float(datos[3])
    y=float(datos[4])
    width = 2*(math.sqrt(a*a*math.cos(ang)**2+b*b*math.sin(ang)**2))
    height = 2*(math.sqrt(a*a*math.sin(ang)*math.sin(ang)+b*b*math.cos(ang)*math.cos(ang)))
    esquinaIzqX = x-width/2
    esquinaIzqY = y-height/2
    if esquinaIzqX<0:
        esquinaIzqX=0
    if esquinaIzqY<0:
        esquinaIzqY=0
    if esquinaIzqX>wmax:
        esquinaIzqX=wmax
    if esquinaIzqY>hmax:
        esquinaIzqY=hmax
    

    return (round(esquinaIzqX),round(esquinaIzqY),round(width),round(height))

def returnEllipseListFiles(path):
    return [str(f) for f in Path(path).glob("**/*-ellipseList.txt")]

def generateArray(file):
    with open(files[file], "r") as f:
        array = f.read().splitlines()
    i=0
    diccionarios = []
    rg = re.compile("(\d)*_(\d)*_(\d)*_big")
    
    while (i<len(array)):
        renglon = array[i]
        if  rg.match(renglon):
            try:
                #Cuantas caras hay en imagem
                cantCaras = int(array[i+1])
                #Formato de lectura
                key = "{}.jpg".format(renglon)
                img = mpimg.imread(os.path.join("dataset",key)) 
                fig,ax = plt.subplots(1)
                ax.imshow(img)
                (h,w, _) = img.shape
                
                rectangulos = []
                for x in range(cantCaras):
                    #annotations.append(array[i+x+2]) este se ocupaba para elipses
                    #Armar rectangulos
                    rec =transformCoordinates(array[i+x+2], w, h)
                    rectangulos.append(rec)
                    rect = patches.Rectangle(
                        (rec[0],rec[1]),rec[2],rec[3],
                        linewidth=1,
                        edgecolor='r',
                        facecolor='none')
                    ax.add_patch(rect)
                plt.show()
                    
                thisDict=dict()
                thisDict={"nombre": key, "annotations": rectangulos,"size":{"width": w, "height": h}}
                
                
                
                
                diccionarios.append(thisDict)
                i=i+cantCaras+2
            except:
                print("{} not found...".format(key))
                i=i+1
        else:
            i=i+1
            
    diccionarios=pd.Series(diccionarios)

    return diccionarios
    


#files = glob.glob("/Users/Marcos/Downloads/SextoSemestre/Softek/dirty_dataset/labels/*-ellipseList.txt")

files = returnEllipseListFiles("labels")
files = pd.Series(files)
print(files)


folder = glob.glob("/Users/Marcos/Downloads/SextoSemestre/Softek/dirty_dataset/dataset/*.jpg")
folder = pd.Series(folder)

labels = glob.glob("/Users/Marcos/Downloads/SextoSemestre/Softek/dirty_dataset/labels/*.jpg")
folder = pd.Series(folder)

array = generateArray(0)

print (array)


img = mpimg.imread(os.path.join("dataset",'2002_08_16_big_img_932.jpg')) 
(h,w, _) = img.shape



#transformCoordinates("10.0 15.0 1 10.866267 282.220968  1", w, h)